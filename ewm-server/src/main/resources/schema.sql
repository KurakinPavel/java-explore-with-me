CREATE TABLE IF NOT EXISTS USERS
(
    USER_ID INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    NAME    VARCHAR(250) NOT NULL,
    EMAIL   VARCHAR(254) NOT NULL,
    CONSTRAINT UQ_USER_EMAIL  UNIQUE (EMAIL)
);

CREATE TABLE IF NOT EXISTS CATEGORIES
(
    CATEGORY_ID INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    NAME        VARCHAR(50) NOT NULL,
    CONSTRAINT UQ_NAME UNIQUE (NAME)
);

CREATE TABLE IF NOT EXISTS COMPILATIONS
(
    COMPILATION_ID INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    TITLE          VARCHAR(50) NOT NULL,
    PINNED         INTEGER NOT NULL
);

CREATE TABLE IF NOT EXISTS EVENTS
(
    EVENT_ID           INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    ANNOTATION         VARCHAR(2000) NOT NULL,
    CATEGORY_ID        INTEGER REFERENCES PUBLIC.CATEGORIES (CATEGORY_ID) ON DELETE RESTRICT,
    CREATED_ON         TIMESTAMP WITHOUT TIME ZONE,
    DESCRIPTION        VARCHAR(7000) NOT NULL,
    EVENT_DATE         TIMESTAMP WITHOUT TIME ZONE,
    INITIATOR_ID       INTEGER REFERENCES PUBLIC.USERS (USER_ID) ON DELETE CASCADE,
    LAT                FLOAT NOT NULL,
    LON                FLOAT NOT NULL,
    LOCATION_ID        INTEGER REFERENCES PUBLIC.LOCATIONS (LOCATION_ID) ON DELETE CASCADE,
    PAID               INTEGER NOT NULL,
    PARTICIPANT_LIMIT  INTEGER NOT NULL,
    CONFIRMED_REQUESTS INTEGER NOT NULL,
    PUBLISHED_ON       TIMESTAMP WITHOUT TIME ZONE,
    REQUEST_MODERATION INTEGER NOT NULL,
    STATE              INTEGER NOT NULL,
    TITLE              VARCHAR(120) NOT NULL
);

CREATE TABLE IF NOT EXISTS PARTICIPATION_REQUESTS
(
    REQUEST_ID   INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    CREATED      TIMESTAMP WITHOUT TIME ZONE,
    EVENT_ID     INTEGER REFERENCES PUBLIC.EVENTS (EVENT_ID) ON DELETE CASCADE,
    REQUESTER_ID INTEGER REFERENCES PUBLIC.USERS (USER_ID) ON DELETE CASCADE,
    STATUS       INTEGER NOT NULL
);

CREATE TABLE IF NOT EXISTS EVENT_COMPILATIONS
(
    PAIR_ID        INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    COMPILATION_ID INTEGER REFERENCES PUBLIC.COMPILATIONS (COMPILATION_ID) ON DELETE CASCADE,
    EVENT_ID       INTEGER REFERENCES PUBLIC.EVENTS (EVENT_ID) ON DELETE CASCADE,
    CONSTRAINT uq_event_compilation UNIQUE (EVENT_ID, COMPILATION_ID)
);
